{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import sprintf from 'sprintf-js';\nimport S from 'string';\nimport MessageFormat from 'intl-messageformat';\nimport Markdown from 'markdown-it';\nimport debug from 'gengojs-debug';\nimport _ from 'lodash';\n\nimport Filter from './filter';\nimport Type from './type';\nimport Find from './find';\n\nvar log = debug('parser');\nvar vsprintf = sprintf.vsprintf;\n/**\n * This class parsees the input and returns \n * the i18n string depending on the parser specified\n * @class Parser\n * @extends {Filter}\n */\nclass Parser extends Filter {\n  constructor(input, core) {\n      super(input);\n      log\n        .debug(`class: ${Parser.name}`, `process: constructor`)\n        .debug('filtered input:', (this.input = super.filter()));\n      // Set locale\n      this.locale = core.header.getLocale();\n      // Set options\n      this.options = core.options;\n\n      var result = new Type(this.input, core);\n      switch (result.parse().type) {\n        case 'phrase':\n          this.input.phrase = this.preparse(result.getPhrase());\n          log\n            .debug('type', 'phrase')\n            .debug('phrase :', this.input.phrase);\n          break;\n        case 'bracket':\n          this.input.phrase = this.preparse(result.getBracket());\n          log\n            .debug('type', 'bracket')\n            .debug('phrase :', this.input.phrase);\n          break;\n        case 'dot':\n          this.input.phrase = this.preparse(result.getDot());\n          log\n            .debug('type', 'dot')\n            .debug('phrase :', this.input.phrase);\n          break;\n      }\n    }\n    /**\n     * Starts the engine and parses the input\n     * @return {String} The i18ned string.\n     */\n  parse() {\n      log\n        .debug(`class: ${Parser.name}`, `process: parse`)\n        .info('parsing phrase:', this.input.phrase);\n      if (_.isUndefined(this.input.phrase)) return '';\n      else {\n        var _format, _default;\n        try {\n          // Parse both at once\n          _format = this.formatParser();\n          _default = this.defaultParser();\n        } catch (error) {\n          log.error(error.stack || String(error));\n        }\n        log.info('selected parser: ',\n          this.input.keywords.parser || this.options.parser.type);\n        // Determine if the user specified a parser\n        switch (this.input.keywords.parser || this.options.parser.type) {\n          case 'default':\n            log.info('parse result - default:', _default);\n            // Render default\n            return _default || '';\n          case 'format':\n            log.info('parse result - format:', _format);\n            // Render format\n            return _format || '';\n          case '*':\n            if (!S(_format).isEmpty() && !S(_default).isEmpty()) {\n              var result = '';\n              // If interpolation failed for default\n              if (/\\{[\\s\\S]*\\}/g.test(_default)) {\n                result = _format;\n              }\n              // If interpolation failed for format\n              if (/\\{[\\s\\S]*\\}/g.test(_format)) {\n                result = _default;\n              }\n              // If all fails then we tried so\n              // return the default since it could\n              // possibly be that _default and _format\n              // are the same.\n              if (S(result).isEmpty()) result = _default;\n              log.info('parse result:', result);\n              return result;\n            }\n            // If formatted string was empty, then it could be\n            // in the default string else just return an empty\n            // string.\n            else if (!S(_format).isEmpty() && !_default) {\n              log.info('parse result - format:', _format);\n              return _format;\n            } else if (!S(_default).isEmpty() && !_format) {\n              log.info('parse result - default:', _default);\n              return _default;\n            } else return '';\n            break;\n        }\n      }\n    }\n    /**\n     * The default parser\n     * @return {String}\n     */\n  defaultParser(str) {\n      log.debug(`class: ${Parser.name}`, `process: defaultParser`);\n      var phrase = str || this.input.phrase;\n      var {\n        markdown, template, sprintf\n      } = this.options.parser;\n      try {\n        // Check if markdown is enabled\n        if (markdown.enabled) phrase = this.markdown(phrase);\n        // Apply interpolation\n        if (!_.isEmpty(this.input.template) && template.enabled)\n          phrase = this.template(phrase);\n        // Apply vsprintf\n        if (!_.isEmpty(this.input.arguments) && sprintf.enabled)\n          phrase = this.vsprintf(phrase);\n      } catch (error) {\n        log.error(error.stack || String(error));\n      }\n      log.debug('result:', phrase);\n      return phrase;\n    }\n    /**\n     * The message formatting parser\n     * @return {String}\n     */\n  formatParser(str) {\n    log.debug(`class: ${Parser.name}`, `process: formatParser`);\n    var phrase = str || this.input.phrase,\n      result;\n    var {\n      markdown\n    } = this.options.parser;\n    try {\n      // Check if markdown is enabled\n      if (markdown.enabled) phrase = this.markdown(phrase);\n      // Try to apply message format\n      result = this.messageFormat(phrase).format(this.input.template);\n    } catch (error) {\n      log.error(error.stack || String(error));\n    }\n    phrase = result;\n    log.debug('result:', phrase);\n    return phrase;\n  }\n\n  /**\n   * Finds the translated phrase in the dictionary\n   * @param  {Object}\n   * @return {String}\n   */\n  preparse(object) {\n    var {\n      parser, header\n    } = this.options;\n    var key = (\n      this.locale.toLowerCase() ===\n      header.default.toLowerCase() ?\n      parser.keywords.default : parser.keywords.translated);\n    if (!object) return '';\n    // If the object is already a string then return\n    if (_.isString(object)) return object;\n    // If it's an object\n    if (_.isPlainObject(object)) {\n      // Check if already contains the key 'default' or 'translated'\n      if (_.has(object, key)) {\n        return _.has(object, key) ? object[key] : object;\n      }\n    }\n  }\n\n  /* Messageformat */\n  messageFormat(str) {\n    str = this.preparse(str);\n    return !S(str).isEmpty() || !str ?\n      new MessageFormat(str, this.locale) : '';\n  }\n\n  /* Markdown */\n  markdown(str) {\n    return new Markdown(_.omit(this.options.markdown,\n      'enabled')).renderInline(str);\n  }\n\n  /* Sprintf */\n  vsprintf(str) {\n    return vsprintf(str, this.input.arguments);\n  }\n\n  /* Interpolation */\n  template(str) {\n    var phrase = str;\n    var {\n      parser\n    } = this.options;\n    // Get the opening and closing template\n    // from options\n    var open = parser.template.open,\n      close = parser.template.close;\n    if (S(phrase).include(open) && S(phrase).include(close)) {\n      var opening = open;\n      var closing = close;\n\n      open = opening.replace(/[-[\\]()*\\s]/g, '\\\\$&').replace(/\\$/g, '\\\\$');\n      close = closing.replace(/[-[\\]()*\\s]/g, '\\\\$&').replace(/\\$/g, '\\\\$');\n      var r = new RegExp(open + '(.+?)' + close, 'g');\n      // Process the interpolation\n      var matches = phrase.match(r) || [];\n      _.forEach(matches, match => {\n        var keys = match.substring(opening.length,\n          // Chop {{ and }}\n          match.length - closing.length).trim().split('.');\n        var value = Find.findR(this.input.template, keys);\n        phrase = phrase.replace(match, value);\n      });\n    }\n    return phrase;\n  }\n}\n\nexport default Parser;"],"sourceRoot":"/source/"}