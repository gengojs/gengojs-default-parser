{"version":3,"sources":["type.js"],"names":[],"mappings":"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","file":"type.js","sourcesContent":["import Notation from 'gengojs-notation';\nimport debug from 'gengojs-debug';\n\nimport Find from './find';\nimport Router from './router';\nimport _ from 'lodash';\n\nvar log = debug('parser');\n\n/**\n * This class determines the type\n * of notation used.\n * @class Type\n * @extends {Notation}\n */\nclass Type extends Notation {\n  constructor(input, core) {\n      super(input.phrase);\n      log\n        .debug(`class: ${Type.name}`, `process: constructor`)\n        .debug(`router exists: ${ \n        // Set dependencies\n        !!(this._router = new Router(input, core))\n      }`)\n        .debug(`options exists: ${\n        // Set options\n        !!(this._options = core.options.parser)\n      }`);\n\n    }\n    /**\n     * Finds the data from a string that is a phrase\n     * @return {String | Object | undefined}\n     */\n  getPhrase() {\n      var keywords = this._options.keywords,\n        result, local, global, key = super.parse().key;\n      try {\n        // local data is\n        local = this._router.local();\n        // Check if global data exists\n        global = this._router.global(keywords.global);\n        // Check if the value exists under that key\n        result = _.has(global, key) ?\n          global[key] : _.has(local, key) ?\n          local[key] : undefined;\n      } catch (error) {\n        if (this._router.isEnabled())\n          log.warn('Oops! Couldn\\'t find key: ' + key +\n            ' with router enabled.');\n        else log.error(error.stack || String(error));\n      }\n      return result;\n    }\n    /**\n     * Parses a string that contains a bracket notation\n     * @return {String | undefined}\n     */\n  getBracket() {\n      var keywords = this._options.keywords,\n        key = super.parse().key,\n        seek = super.parse().seek,\n        result, local, global;\n      try {\n        // Check if router is enabled and data exists under router\n        local = this._router.local();\n        // Check if local data exists or even has the value from the key\n        if (!_.isUndefined(local))\n          local = (_.has(local, key)) ? (local[key] || local) : local;\n        // Check if global data exists\n        global = this._router.global(keywords.global);\n        // Find the phrase in the local scope\n        local = _.has(local, key) ? local[key] : undefined;\n        // Find the phrase in the global scope\n        global = _.has(global, key) ? global[key] : undefined;\n        // If the bracket contains a dot notation\n        if (seek) {\n          //match the dot.dot.dot\n          if (Notation.isDot(seek)) {\n            //deep search for the data and parse the result\n            result = Find.find(local, seek) || Find.find(global, seek);\n            //check if key exists\n            result = _.has(result, key) ? result[key] : (result || undefined);\n          } else result = local ? local[seek] :\n            local || global ? global[seek] : global;\n        } else {\n          // Since it contains only a single dot\n          // Check if the local or global scope contains the key\n          if (local)\n            result = (_.has(local, key)) ? local[key] : local;\n          else if (global)\n            result = (_.has(global, key)) ? global[key] : global;\n        }\n\n      } catch (error) {\n        if (this._router.isEnabled())\n          log.warn('Oops! Couldn\\'t find key: ' + seek || key +\n            ' with router enabled.');\n        else log.error(error.stack || String(error));\n      }\n      return result;\n    }\n    /**\n     * Parses a string that contains a dot notation\n     * @return {String | undefined}\n     */\n  getDot() {\n    var keywords = this._options.keywords,\n      key = super.parse().key,\n      result, local, global;\n    try {\n      // Find the phrase in the local scope\n      local = this._router.local();\n      // Find the phrase in the global scope\n      global = this._router.global(keywords.global);\n\n      result = Find.find(local, key) || Find.find(global, key);\n    } catch (error) {\n      if (this._router.isEnabled())\n        log.warn('Oops! Couldn\\'t find key: ' + this._type.key +\n          ' with router enabled.');\n      else log.error(error.stack || String(error));\n    }\n    return result;\n  }\n}\n\nexport default Type;"],"sourceRoot":"/source/"}