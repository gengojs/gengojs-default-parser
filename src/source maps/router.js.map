{"version":3,"sources":["router.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;4BACJ,eAAe;;;;oBAChB,QAAQ;;;;AACzB,IAAM,GAAG,GAAG,+BAAM,QAAQ,CAAC,CAAC;;;;;;;;IAOtB,MAAM;AACC,WADP,MAAM,CACE,KAAK,EAAE,IAAI,EAAE;0BADrB,MAAM;;AAEN,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;;AAE7B,OAAG,CACA,KAAK,aAAW,MAAM,CAAC,IAAI,yBAA2B,CACtD,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACvC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACvC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CACxC,KAAK;;;AAGJ,aAAS,EAAG,IAAI,CAAC,OAAO,GAAG,oBAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,GACxD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAC7C,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAC3B,CAAC;;AAEJ,QAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC/C;;;;;;;eApBC,MAAM;;WAyBD,qBAAG;AACR,SAAG,CACA,KAAK,aAAW,MAAM,CAAC,IAAI,uBAAyB,CACpD,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;AAClD,aAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;KACjC;;;;;;;;;WAMG,gBAAC,OAAO,EAAE;AACZ,SAAG,CACA,KAAK,aAAW,MAAM,CAAC,IAAI,oBAAsB,CAAC;AACrD,UAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,OAAO,GACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAI,IAAI,CAAC,KAAK,CAAC;AACrC,SAAG,CACA,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;AACnC,aAAO,MAAM,CAAC;KACf;;;;;;;;;WAME,iBAAG;AACN,SAAG,CACA,KAAK,aAAW,MAAM,CAAC,IAAI,mBAAqB,CAAC;AACpD,UAAI,MAAM,CAAC;;AAEX,UAAI,IAAI,CAAC,SAAS,EAAE,EAAE;;AAEpB,YAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AACvC,gBAAM,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,AAAC,CAAC;AAC5C,aAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnC,iBAAO,MAAM,CAAC;SACf,MAAM;AACL,gBAAM,GAAG,kBAAK,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;AACrD,aAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnC,iBAAO,MAAM,CAAC;SACf;OACF,MAAM,OAAO,SAAS,CAAC;KACzB;;;SAnEG,MAAM;;;qBAqEG,MAAM","file":"router.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'gengojs-debug';\nimport Find from './find';\nconst log = debug('parser');\n\n/**\n * This class routes the data depending on the\n * structure of the dictionary\n * @class Router\n */\nclass Router {\n  constructor(input, core) {\n      this._router = core.router;\n      this._header = core.header;\n      this._backend = core.backend;\n\n      log\n        .debug(`class: ${Router.name}`, `process: constructor`)\n        .debug('router exists:', !!this._router)\n        .debug('header exists:', !!this._header)\n        .debug('header exists:', !!this._backend)\n        .debug(\n          // Get the locale from either the keyword\n          // or header\n          'locale:', (this._locale = _.has(input.keywords, 'locale') ?\n            this._header.setLocale(input.keywords.locale) :\n            this._header.getLocale())\n        );\n\n      this._data = this._backend.find(this._locale);\n    }\n    /**\n     * Determines whether router is enabled.\n     * @return {Boolean} True if router is enabled\n     */\n  isEnabled() {\n      log\n        .debug(`class: ${Router.name}`, `process: isEnabled`)\n        .debug('isEnabled: ', this._router.isEnabled());\n      return this._router.isEnabled();\n    }\n    /**\n     * Returns the global data based on the keyword\n     * @param  {String} keyword The keyword to the value\n     * @return {Object}         The value\n     */\n  global(keyword) {\n      log\n        .debug(`class: ${Router.name}`, `process: global`);\n      var result = this.isEnabled() && keyword ?\n        (this._data[keyword]) : this._data;\n      log\n        .info('global result: ', result);\n      return result;\n    }\n    /**\n     * Returns the locale data based on the keyword\n     * @param  {String} keyword The keyword to the value\n     * @return {Object}         The value\n     */\n  local() {\n    log\n      .debug(`class: ${Router.name}`, `process: local`);\n    var result;\n    //check if router is enabled\n    if (this.isEnabled()) {\n      //if dot depth is 0 else deep search for the data\n      if (this._router.toArray().length === 0) {\n        result = (this._data[this._router.toDot()]);\n        log.info('local result: ', result);\n        return result;\n      } else {\n        result = Find.find(this._data, this._router.toDot());\n        log.info('local result: ', result);\n        return result;\n      }\n    } else return undefined;\n  }\n}\nexport default Router;"],"sourceRoot":"/source/"}